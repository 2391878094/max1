import gym
import numpy as np
import random
from IPython.display import clear_output

#加载Taxi-v2游戏环境并展示它的样子
env = gym.make("Taxi-v2").env
env.render()


print("Action Space {}".format(env.action_space))       #打印行动空间，在当前状况下是六个（东西南北上下车）
print("State Space {}".format(env.observation_space))       #打印状态空间，5*5*5*4=500

"""
0 = 南
1 = 北
2 = 东
3 = 西
4 = 上车
5 = 下车
"""




#建立Q表
q_table = np.zeros([env.observation_space.n, env.action_space.n])   #初值都为0

#开始训练
"""
Training the agent
"""

# Hyperparameters
alpha = 0.1
gamma = 0.6
epsilon = 0.1

# For plotting metrics
all_epochs = []
all_penalties = []

for i in range(1, 100001):     #训练十万次
    state = env.reset()

    epochs, penalties, reward, = 0, 0, 0
    done = False
    
    while not done:
        if random.uniform(0, 1) < epsilon:
            action = env.action_space.sample() # Explore action space
        else:
            action = np.argmax(q_table[state]) # Exploit learned values

        next_state, reward, done, info = env.step(action) 
        
        old_value = q_table[state, action]
        next_max = np.max(q_table[next_state])
        
        new_value = (1 - alpha) * old_value + alpha * (reward + gamma * next_max)
        q_table[state, action] = new_value

        if reward == -10:
            penalties += 1

        state = next_state
        epochs += 1
        
    if i % 100 == 0:
        clear_output(wait=True)
        print(f"Episode: {i}")

print("Training finished.\n")





#选用最佳操作跑100次
"""
评估学习后的值
"""
total_epochs, total_penalties = 0, 0
episodes = 100

for _ in range(episodes):
    state = env.reset()
    epochs, penalties, reward = 0, 0, 0
    
    done = False
    
    while not done:
        action = np.argmax(q_table[state])
        state, reward, done, info = env.step(action)

        if reward == -10:
            penalties += 1

        epochs += 1
        
        #如果想把每一步的图都画出来，把下面两句加入到代码中
        """
        env.s = state
        env.render()
        """
        
        
        
    total_penalties += penalties
    total_epochs += epochs


print(f"Results after {episodes} episodes:")
print(f"Average timesteps per episode: {total_epochs / episodes}")     #平均每次的步数
print(f"Average penalties per episode: {total_penalties / episodes}")   #被惩罚的分数



